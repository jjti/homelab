- name: Install Nomad
  hosts: ser
  become: true

  # Download CNI plugins
  # https://developer.hashicorp.com/nomad/docs/install#post-installation-steps
  pre_tasks:
    - name: Check if files already exist in /opt/cni/bin
      stat:
        path: /opt/cni/bin
      register: cni_bin_exists

    - name: Create the destination directory
      file:
        path: /opt/cni/bin
        state: directory
      when: not cni_bin_exists.stat.exists

    - name: Download CNI plugins
      get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz"
        dest: /tmp/cni-plugins.tgz
      when: not cni_bin_exists.stat.exists

    - name: Extract CNI plugins
      unarchive:
        src: /tmp/cni-plugins.tgz
        dest: /opt/cni/bin
        remote_src: yes
        extra_opts: --strip-components=1 # This ensures the files are extracted directly into /opt/cni/bin
      when: not cni_bin_exists.stat.exists

    - name: Clean up the temporary archive
      file:
        path: /tmp/cni-plugins.tgz
        state: absent
      when: not cni_bin_exists.stat.exists

    - name: Create or update /etc/sysctl.d/bridge.conf
      copy:
        content: |
          net.bridge.bridge-nf-call-arptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
        dest: /etc/sysctl.d/bridge.conf

    - name: Check if the client-id file already exists
      stat:
        path: /var/nomad/client/client-id
      register: client_id_file

    - name: Create the destination directory if it doesn't exist
      file:
        path: /var/nomad/client
        state: directory
      when: not client_id_file.stat.exists

    - name: Generate lowercase UUID using Python
      command: python3 -c "import uuid; print(str(uuid.uuid4()).lower())"
      register: generated_uuid
      changed_when: false

    - name: Save the UUID to /var/nomad/client/client-id
      copy:
        content: "{{ generated_uuid.stdout }}"
        dest: /var/nomad/client/client-id
      when: not client_id_file.stat.exists

  roles:
    - role: ansible-nomad
      vars:
        nomad_version: 1.6.1
        nomad_group_name: ser
        nomad_node_role: both
        nomad_raft_protocol: 3
        nomad_docker_enable: false
        nomad_docker_dmsetup: false
        nomad_bind_address: 0.0.0.0

        nomad_use_consul: true
        nomad_network_interface: enp1s0

        nomad_consul_address: localhost:8501
        nomad_consul_ssl: true
        nomad_consul_token: # from consul deployment
        nomad_consul_ca_file: /etc/consul/ssl/consul-agent-ca.pem
        nomad_consul_cert_file: /etc/consul/ssl/dc1-server-consul-0.pem
        nomad_consul_key_file: /etc/consul/ssl/dc1-server-consul-0-key.pem
        nomad_consul_servers_service_name: nomad
        nomad_consul_clients_service_name: nomad-client

        nomad_acl_enabled: true # bootstrap nomad after this

        # https://developer.hashicorp.com/nomad/tutorials/transport-security/security-enable-tls
        nomad_tls_enable: false # im lazy
        # nomad_tls_copy_keys: true
        # nomad_ca_file: nomad-agent-ca.pem
        # nomad_cert_file: global-server-nomad.pem
        # nomad_key_file: global-server-nomad-key.pem
        nomad_encrypt_enable: true
        nomad_encrypt:

        nomad_telemetry: true
        nomad_telemetry_disable_hostname: true
        nomad_telemetry_prometheus_metrics: true
        nomad_telemetry_publish_node_metrics: true
        nomad_telemetry_publish_allocation_metrics: true
        nomad_autopilot: true

        nomad_config_custom:
          ui:
            enabled: true
